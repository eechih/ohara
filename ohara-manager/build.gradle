/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

defaultTasks 'clean', 'build'

import org.apache.tools.ant.taskdefs.condition.Os
private static Iterable<String> toOsCommand(Object... commands) {
  def newCmds = []
  if(Os.isFamily(Os.FAMILY_WINDOWS)) {
    // append "windows command exec" to the actual commands
    newCmds = ['cmd', '/c']
  }

  newCmds.addAll(commands)
  println newCmds
  return newCmds
}

/**
 * clean all processes and files, and then install all dependencies
 */
task clean {
  if(!project.hasProperty('skipManager')) {
    doLast {
      // We need some Manager's dependencies so we'll able to run the claen command afterward
      exec {
        commandLine toOsCommand('yarn', 'install', '--frozen-lockfile')
      }
      exec {
        commandLine toOsCommand('yarn', 'clean')
      }
    }
  }
  delete "$projectDir/build"
}

task setup {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        commandLine toOsCommand('yarn', 'setup')
      }
    }
  }
  dependsOn(':ohara-it:jar')
  // generate the version file for /inspect/manager
  dependsOn(':ohara-common:versionFile')
}

task report {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        commandLine toOsCommand('yarn', 'report:combined')
      }
    }
  }
}

task test {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        commandLine toOsCommand('yarn', 'test:unit:ci')
      }
    }
  }
  dependsOn setup
}

task lint {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        commandLine toOsCommand('yarn', 'lint:ci')
      }
    }
  }
  dependsOn setup
}

task format {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        commandLine toOsCommand('yarn', 'format:check')
      }
    }
  }
  dependsOn setup
}

task api {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        if(!project.hasProperty('ohara.manager.api.configurator')) throw new IllegalArgumentException("ohara.manager.api.configurator is required")
        String configurator = project.getProperty('ohara.manager.api.configurator')

        commandLine toOsCommand('yarn', 'test:api:ci', '--port', 0, '--configurator', configurator)
      }
    }
  }
  dependsOn setup
}

task it {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        // Note: This task oughts to test the UI flows and UI behaviors, there could be a bunch of API requests calling in this task
        // We need to use FAKE mode of configurator to hold up these test cases
        if(!project.hasProperty('ohara.manager.it.configurator')) throw new IllegalArgumentException("ohara.manager.it.configurator is required")
        String configurator = project.getProperty('ohara.manager.it.configurator')

        commandLine toOsCommand('yarn', 'test:it:ci', '--configurator', configurator)
      }
    }
  }
  dependsOn setup
}

task e2e {
  if(!project.hasProperty('skipManager')) {
    doLast {
      exec {
        if(!project.hasProperty('ohara.manager.e2e.configurator')) throw new IllegalArgumentException("ohara.manager.e2e.configurator is required")
        String configurator = project.getProperty('ohara.manager.e2e.configurator')

        if(!project.hasProperty('ohara.manager.e2e.nodeHost')) throw new IllegalArgumentException("ohara.manager.e2e.nodeHost is required")
        String nodeHost = project.getProperty('ohara.manager.e2e.nodeHost')

        if(!project.hasProperty('ohara.manager.e2e.nodePort')) throw new IllegalArgumentException("ohara.manager.e2e.nodePort is required")
        String nodePort = project.getProperty('ohara.manager.e2e.nodePort')

        if(!project.hasProperty('ohara.manager.e2e.nodeUser')) throw new IllegalArgumentException("ohara.manager.e2e.nodeUser is required")
        String nodeUser = project.getProperty('ohara.manager.e2e.nodeUser')

        if(!project.hasProperty('ohara.manager.e2e.nodePass')) throw new IllegalArgumentException("ohara.manager.e2e.nodePass is required")
        String nodePass = project.getProperty('ohara.manager.e2e.nodePass')

        if(!project.hasProperty('ohara.it.container.prefix')) throw new IllegalArgumentException("ohara.it.container.prefix is required")
        String prefix = project.getProperty('ohara.it.container.prefix')
               
        commandLine toOsCommand('yarn', 'test:e2e:ci', '--port', 0, '--configurator', configurator, '--nodeHost', nodeHost, '--nodePort', nodePort, '--nodeUser', nodeUser, '--nodePass', nodePass, '--servicePrefix', prefix)
      }
    }
  }
  dependsOn setup
}

task assemble(type: Tar) {
  /**
   * the runtime stuff are downloaded by setup task so assembly must run after setup.
   */
  dependsOn setup
  /**
   * exclude useless dirs and files from ohara-manager
   */
  exclude ".env"
  exclude ".env.test"
  exclude ".eslintrc"
  exclude ".gitignore"
  exclude ".eslintignore"
  exclude ".prettierignore"
  exclude ".build.gradle"
  exclude ".yarnrc"
  exclude "package.json"
  exclude "cypress.json"
  exclude "yarn.lock"
  exclude "node_modules"
  exclude "cypress"
  exclude "public"
  exclude "coverage"
  exclude "src"
  into("ohara-manager-${project.properties["version"]}/bin") {
    // ref to root module
    from { "$projectDir/../bin" }
    fileMode 0755
  }
  into("ohara-manager-${project.properties["version"]}/bin") {
    // version file
    from { "$projectDir/../ohara-common/build/generated/ohara_version" }
  }
  into("ohara-manager-${project.properties["version"]}/client") {
    from { "$projectDir/client" }
  }
  into("ohara-manager-${project.properties["version"]}/constants") {
    from { "$projectDir/constants" }
  }
  into("ohara-manager-${project.properties["version"]}/node_modules") {
    from { "$projectDir/node_modules" }
  }
  into("ohara-manager-${project.properties["version"]}/routes") {
    from { "$projectDir/routes" }
  }
  into("ohara-manager-${project.properties["version"]}/utils") {
    from { "$projectDir/utils" }
  }
  into("ohara-manager-${project.properties["version"]}") {
    from { "$projectDir/../gradle.properties" }
    from { "$projectDir/start.js" }
    from { "$projectDir/config.js" }
  }
  destinationDir file("$projectDir/build/distributions")
  archiveName "ohara-manager-${project.properties["version"]}.tar"
}

task build {
  dependsOn setup
  dependsOn test
  dependsOn lint
  dependsOn format
  dependsOn assemble
}

task runManager {
  description 'run a manager'
  doLast {
    exec {
      commandLine toOsCommand('yarn', 'setup')
    }
    exec {
      String port = 22222
      if(project.hasProperty('port')) port = project.getProperty('port')

      if(!project.hasProperty('configurator')) throw new IllegalArgumentException("configurator is required")
      String configurator = project.getProperty('configurator')

      commandLine toOsCommand('node', './start.js', '--port', port, "--configurator", configurator)
    }
  }
}